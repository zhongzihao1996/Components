/* eslint-disable @typescript-eslint/no-var-requires */
const fs = require('fs');
const render = require('json-templater/string');
const uppercamelcase = require('uppercamelcase');
const path = require('path');
const endOfLine = require('os').EOL;

const Components = require('../components.json');

// 输出地址
const OUTPUT_PATH = path.join(__dirname, '../src/main.ts');
// 导入模板
const IMPORT_TEMPLATE = 'import {{name}} from \'../packages/{{package}}/index\';';
// 安装组件模板
const INSTALL_COMPONENT_TEMPLATE = '  {{name}}';
// 模板
const MAIN_TEMPLATE = `/* Automatically generated by 'build-entry.js' */

import Vue from 'vue';

// import ElementUI from 'element-ui';
// import 'element-ui/lib/theme-chalk/index.css';

{{include}}

interface componentsData {
  [name: string]: object;
}

const components: componentsData = {
{{install}},
};

const install = (vue: typeof Vue) => {
  // vue.use(ElementUI);

  Object.keys(components).forEach(key => {
    vue.component(key, components[key]);
  });
};

if (typeof window !== 'undefined' && window.Vue) {
  install(window.Vue);
}

export default {
  version: '{{version}}',
  install,
};

export {
{{list}}
};
`;

delete Components.font;

const ComponentNames = Object.keys(Components);

const includeComponentTemplate = [];
const installTemplate = [];
const listTemplate = [];

// 根据 components.json 文件批量生成模板所需的参数
ComponentNames.forEach(name => {
  const componentName = uppercamelcase(name);

  includeComponentTemplate.push(render(IMPORT_TEMPLATE, {
    name: componentName,
    package: name
  }));

  installTemplate.push(render(INSTALL_COMPONENT_TEMPLATE, {
    name: componentName,
    component: name
  }));

  listTemplate.push(`  ${componentName}`);
});

// 传入模板参数
const template = render(MAIN_TEMPLATE, {
  include: includeComponentTemplate.join(endOfLine),
  install: installTemplate.join(`,${endOfLine}`),
  version: '1.0.0',
  list: listTemplate.join(`,${endOfLine}`)
});

// 生成入口文件
fs.writeFileSync(OUTPUT_PATH, template);
console.log('[build entry] DONE:', OUTPUT_PATH);
